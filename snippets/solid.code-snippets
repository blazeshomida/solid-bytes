{
  "createSignal": {
    "prefix": "SSignal",
    "description": "Creates a simple reactive state with a getter and setter",
    "body": "const [${2:state}, set${2/(.*)/${1:/capitalize}/}] = createSignal${1}(${3})"
  },
  "createEffect": {
    "prefix": "SEffect",
    "description": "Creates a reactive computation that runs after the render phase",
    "body": "createEffect${1}(() => { ${2} })"
  },
  "createMemo": {
    "prefix": "SMemo",
    "description": "Creates a readonly derived reactive memoized signal",
    "body": "const ${2:value} = createMemo${1}(() => ${3})"
  },
  "createResource": {
    "prefix": "SResource",
    "description": "Creates a resource that wraps a repeated promise in a reactive pattern",
    "body": "const [${2:data}, { mutate, refetch }] = createResource${1}(${3})"
  },
  "Solid Component": {
    "prefix": "SComponent",
    "description": "Solid Component",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return <div>${1:${TM_FILENAME_BASE}}</div>",
      "}"
    ]
  },
  "Solid Component Export": {
    "prefix": "SExportComponent",
    "description": "Solid Component Export",
    "body": [
      "export const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return <div>${1:${TM_FILENAME_BASE}}</div>",
      "}"
    ]
  },
  "Dynamic": {
    "prefix": "SDynamic",
    "description": "Renders an arbitrary custom or native component and passes the other props",
    "body": "<Dynamic${1} component={${2:<MyComponent />}} ${3} /"
  },
  "ErrorBoundary": {
    "prefix": "SErrorBoundary",
    "description": "Catches uncaught errors inside components and renders a fallback content. Errors thrown from the fallback can be caught by a parent ErrorBoundary",
    "body": [
      "<ErrorBoundary${1} fallback={(error, reset) => <div onClick={reset}>Error: {error.toString()}</div>}>",
      "  ${2:${TM_SELECTED_TEXT}}",
      "</ErrorBoundary>"
    ]
  },
  "For": {
    "prefix": "SFor",
    "description": "Creates a list of elements from a list. It receives a map function as its child that receives a list element and an accessor with the index and returns a JSX-Element; if the list is empty, an optional fallback is returned",
    "body": [
      "<For${1} each={${2:list}()} fallback={<div>Loading...</div>}>",
      "  {(${3:item}) => (",
      "   ${4:<li>{${5:item.name}\\}</li>}",
      "  )}",
      "</For>"
    ]
  },
  "Index": {
    "prefix": "SIndex",
    "description": "Non-keyed iteration over a list creating elements from its items. To be used if you have a list with fixed indices, but changing values. If you have a list with changing indices, better use `<For>`",
    "body": [
      "<Index${1} each={${2:list}()} fallback={<div>Loading...</div>}>",
      "  {(${3:item}) => (",
      "    ${4:<li>{${5:item.name}\\}</li>}",
      "  )}",
      "</Index>"
    ]
  },
  "Portal": {
    "prefix": "SPortal",
    "description": "Useful for inserting modals and tooltips outside of an cropping layout. If no mount point is given, the portal is inserted in document.body; it is wrapped in a `<div>` unless the target is document.head or `isSVG` is true. setting `useShadow` to true places the element in a shadow root to isolate styles",
    "body": [
      "<Portal${1} mount={document.getElementById(\"${2}\")}>",
      "  ${3:<div>${4:My Content}</div>}",
      "</Portal>"
    ]
  },
  "Show": {
    "prefix": "SShow",
    "description": "Conditionally render its children or an optional fallback componentConditionally render its children or an optional fallback componentConditionally render its children or an optional fallback component",
    "body": [
      "<Show${1} when=${2:state.count > 0} fallback={<div>Loading...</div>}>",
      "  ${3:<div>$4:My Content}</div>}",
      "</Show>"
    ]
  },
  "Switch / Match": {
    "prefix": "SSwitch",
    "description": "Switches between content based on mutually exclusive conditions. Selects a content based on condition when inside a `Switch` control flow",
    "body": [
      "<Switch${1} fallback={<div>Not Found</div>}>",
      "  <Match${2} when={${3:state.route === \"home\"}}>",
      "    ${4:<Home />}",
      "  </Match>",
      "  <Match when={${5:state.route === \"settings\"}}>",
      "    ${6:<Settings />}",
      "  </Match>",
      "</Switch>"
    ]
  },
  "Suspense": {
    "prefix": "SSuspense",
    "description": "Tracks all resources inside a component and renders a fallback until they are all resolved",
    "body": [
      "<Suspense${1} fallback={<div>Loading...</div>}>",
      "  ${2:${TM_SELECTED_TEXT}}",
      "</Suspense>"
    ]
  },
  "SuspenseList": {
    "prefix": "SSuspenseList",
    "description": "**[experimental]** Controls the order in which suspended content is rendered",
    "body": [
      "<SuspenseList${1} revealOrder=\"${3|forwards,backwards,together|}\" tail=\"${4|collapsed,hidden|}\">",
      "  <Suspense${2} fallback={<h2>Loading...</h2>}>",
      "    ${5:<div>{resource.user\\}</div>}",
      "  </Suspense>",
      "</SuspenseList>"
    ]
  },
  "children": {
    "prefix": "SChildren",
    "description": "Resolves child elements to help interact with children",
    "body": "const ${2} = children${1}(() => ${3:props.children})"
  },
  "context": {
    "prefix": "SContext",
    "description": "Creates a Context to handle a state scoped for the children of a component. use a context to receive a scoped state from a parent's Context.Provider",
    "body": [
      "export const ${2}Context = createContext${1}(${3})",
      "export function use${2}Context() {",
      "  const context = useContext${1}(${2}Context)",
      "  if (!context) {",
      "    throw new Error(\"use${2}Context: cannot find a ${2}Context\")",
      "  }",
      "  return context",
      "}",
      "export function ${2:Counter}Provider() {",
      "  return (",
      "    <${2:Counter}Context.Provider value={${3:counter}}>",
      "      {props.children}",
      "    </${2:Counter}Context.Provider>",
      "  )",
      "}"
    ]
  },
  "createUniqueId": {
    "prefix": "SUuid",
    "description": "A universal id generator that is stable across server/browser. Note: on the server this only works under hydratable components",
    "body": "const ${2:id} = createUniqueId${1}()"
  },
  "lazy": {
    "prefix": "SLazy",
    "description": "Used to lazy load components to allow for code splitting. Components are not loaded until rendered",
    "body": "const ${2} = lazy${1}(() => import(\"${3}\"))"
  },
  "createStore": {
    "prefix": "SStore",
    "description": "Creates a reactive store that can be read through a proxy object and written with a setter function",
    "body": "const [${2:state}, set${2/(.*)/${1:/capitalize}/}] = createStore${1}(${3})"
  },
  "batch": {
    "prefix": "SBatch",
    "description": "Execute a callback that will not side-effect until its top-most batch is completed",
    "body": "batch${1}(() => { ${2:set${3:State}(${4})} });"
  },
  "catchError": {
    "prefix": "SCatchError",
    "description": "Run an effect whenever an error is thrown within the context of the child scopes",
    "body": "const ${4:result} = catchError${1}(${2:() => {${3}\\}});"
  }
}